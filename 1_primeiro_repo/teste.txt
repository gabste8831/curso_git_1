GIT = Versionamento de Códigos, poder criar versões... organizar e tornar o código acessível

GIT INIT => cria um repositório
(o git bash está presente tanto dentro do VS, quanto no pesquisar do PC)

a BRANCH seria uma ramificação do projeto
a branch principal seria o projeto principal, e as demais serão "cópias" para modificação, sem alterar a fonte principal

pra linkar com o repositorio é:
git remote add origin https://github.com/gabste8831/curso_git_1.git

git commit -m "info" => carrega as informações do commit
git push -m  origin master => envia

--------------------------------------------------------------------------------

GIT STATUS
- Mapeamento de todas as alterações do projeto - diz o que tem no repositório no github, e o que não... o que precisa de commit, etc... 
mostra a situação atual das mudanças e estrutura

--------------------------------------------------------------------------------

GIT ADD
- Processo de adição de novos arquivos ao controle de versão, presente posterior a isso, ao controle do git
agora o arquivo está sendo mapeado pelo git
- Usando o GIT ADD . => ele adiciona tudo de uma vez

--------------------------------------------------------------------------------

GIT COMMIT
- fiz as mudanças, e quero salvar isso, para repletir no repositório
- o commit meio que salva isso, e também permite comentários para controle
- git commt -m "mensagem"
- git commit -a -m "mensagem" => envia todos (-a = all) (-m = mensage)

--------------------------------------------------------------------------------

GIT PUSH
- O git push serve para enviar por fim, as alterções, os arquvos presentes no git, para o github
- quando damos um git status, e não há nada pendente, estamos aptos para enviar o git push

--------------------------------------------------------------------------------

GIT PULL

- Para sincronizar as aletações do repositório remoto, para o local, usa-se o git pull ("puxar"), assim
unindo os códigos

--------------------------------------------------------------------------------

GIT CLONE

- baixar um repositório remoto para local, chama-se clonar repositorio
- muito usado quando entramos em um novo projeto já iniciado, ou equipe... enfim
- basicamente o pull puxa alterações do seu repositório, feitas online, e o clone, puxa o repositório inteiro novo, podendo ser um que ainda
não está presente na maquina local

- nós abrimos o repo no github, vamos em "code" e copiamos aquele link fornecido
- dai é só ir no terminal, digitar "cd nome_da_nova_pasta"
- agora já estamos no terminal da nova nome_da_nova_pasta
- digitamos "git clone urlDoNovoRepo" . (o ponto serve para ele clonar no repositório atual, na pasta que foi criada)

- todos os clones estão ligados diretamente a um repositório online, e assim todos conseguem ter acesso às modificações, com o push e pull

--------------------------------------------------------------------------------

GIT RM

- para remover um arquivo, utilizamos o git RM
- ele remove o arquivo, e da mesma forma, essa alteração até então é feita somente localmente...
- precisamos então dar um git status, e depois um git commit -a -m "exclusão de arquivos desnecessarios"
- é interessante pq, se eu subir essa exclusão para o repo online, e um clone puxar um "git pull", ele puxa a exclusão que eu fiz

--------------------------------------------------------------------------------

LS

- Comando que serve para visualizar tudo o que o GIT BASH tem controle sobre o código... isso é bom para, se caso algum arquivo não esteja
sob controle do git, da para add

--------------------------------------------------------------------------------

GIT LOG 

- Acesso ao histório de modificações do arquivo... algo além do terminal que a gente da um "clear" toda hora
- mostra a alteração, a data e quem fez (nome, email, etc)
- para sair do log, é só pressionar "q"

--------------------------------------------------------------------------------

GIT MV

- o git mv é responsável por "recortar" o arquivo, assim permitindo com que a gente mova para outras pastas...
- exemplo, criei uma pasta css, mas criei o arquvio styles.css fora dessa pasta
- para mover, e até mesmo renomear, fazemos o seguinte
- git mv styles.css css/styles.css (arquivo primeiro, e depois a pasta, com o novo nome, ou repetindo o primeiro nome)

--------------------------------------------------------------------------------

GIT CHECKOUT

- para retornar ao repositório master, no github
- por acaso alteramos algo que não deveria... enfim, usamos o git checkout
- no caso antes do commit e do push
- git checkout teste.txt por exemplo

--------------------------------------------------------------------------------

GIT IGNORE

- quando queremos ignorar algum arquivo, para não subir pro repositório, ou ficar oculto...
- criamos um arquivo com o nome ".gitignore"
- e lá dentro adicionamos o nome dos arquivos a serem ignorados...



